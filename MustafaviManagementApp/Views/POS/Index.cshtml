@using System.Text.Json
@{
    Layout = "";
    var medsJson = JsonSerializer.Serialize(ViewBag.MedicinesLite);
    var invJson = JsonSerializer.Serialize(ViewBag.InventoryLite);
    var catsJson = JsonSerializer.Serialize(ViewBag.CategoriesLite);
    var defaultVat = 0;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Advanced POS</title>

    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: #f8f9fa
        }

        .prod-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill,minmax(160px,1fr));
            gap: .9rem
        }

        .prod-card {
            height: 200px;
            cursor: pointer;
            transition: box-shadow .15s,transform .25s
        }

            .prod-card:hover {
                box-shadow: 0 0 .75rem rgba(0,0,0,.1)
            }

            .prod-card.red {
                border: 2px solid #dc3545;
                opacity: .5;
                pointer-events: none
            }

        .stock-badge {
            position: absolute;
            top: 4px;
            right: 4px
        }

        .nav-scroll {
            overflow-x: auto;
            flex-wrap: nowrap;
            padding-bottom: .25rem
        }

        .offcanvas-end {
            width: 330px
        }

        .cart-table tbody {
            font-size: .85rem
        }

        .sum-line {
            display: flex;
            justify-content: space-between;
            font-size: .9rem
        }

        .sum-grand {
            display: flex;
            justify-content: space-between;
            font-weight: 700;
            font-size: 1.1rem
        }

        .prod-card .card-body {
            display: flex;
            flex-direction: column;
            padding: .5rem
        }

        .prod-card img {
            height: 80px;
            object-fit: contain;
            margin-bottom: .5rem
        }

        .prod-card .text-truncate {
            flex: 1 1 auto;
            margin-bottom: .25rem
        }

        .prod-card .fw-bold {
            flex-shrink: 0
        }

        @@keyframes pop {
            0% {
                transform: scale(1)
            }

            50% {
                transform: scale(1.07)
            }

            100% {
                transform: scale(1)
            }
        }

        @@media (max-width:768px) {
            .prod-grid {
                grid-template-columns: repeat(auto-fill,minmax(140px,1fr))
            }
        }</style>
</head>

<body>
    @* <form id="posForm" method="post" action="/POS/Index">
        <input type="hidden" name="itemsJson" id="itemsJson" />
        <input type="hidden" name="actionType" id="actionType" />
        <input type="hidden" name="saleId" id="saleId" />

        <!-- NAVBAR -->

        <nav class="navbar navbar-expand-lg bg-white shadow-sm sticky-top">
            <div class="container-fluid">
                <a class="navbar-brand fw-semibold" href="/"><i class="bi-capsule-pill me-1"></i>POS</a>

                <div class="flex-grow-1 mx-2 position-relative">
                    <i class="bi-search position-absolute top-50 start-0 translate-middle-y text-muted ms-3" style="z-index:2;"></i>
                    <input id="searchBox" class="form-control ps-5" type="text" placeholder="Search medicine…" style="padding-left:2.2rem;">
                </div>

                <button class="btn position-relative me-3" data-bs-toggle="offcanvas" data-bs-target="#cartCanvas" type="button">
                    <i class="bi-cart fs-4"></i>
                    <span id="cartBadge" class="position-absolute top-0 badge bg-danger rounded-pill">0</span>
                </button>

                <button id="btnHeldOrders" class="btn position-relative" data-bs-toggle="offcanvas" data-bs-target="#heldCanvas" title="Held Orders" type="button">
                    <i class="bi-hourglass-split fs-4"></i>
                </button>
            </div>
        </nav>


        <!-- CATEGORY BAR -->
        <ul id="catBar" class="nav nav-pills nav-scroll px-3 mt-2 pb-1"></ul>

        <!-- PRODUCT GRID -->
        <div class="container-fluid mt-2 pb-4">

            <div id="gridWrap" class="prod-grid"></div>
        </div>

        <!-- CART OFFCANVAS -->
        <div class="offcanvas offcanvas-end" id="cartCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title"><i class="bi-cart me-1"></i>Cart</h5>
                <button class="btn-close" data-bs-dismiss="offcanvas" type="button"></button>
            </div>
            <div class="offcanvas-body d-flex flex-column p-2">
                <table class="table table-sm cart-table mb-1">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th class="text-center" style="width:80px">Qty</th>
                            <th class="text-end" style="width:80px">Rate</th>
                            <th class="text-end" style="width:80px">Total</th>
                            <th style="width:30px"></th>
                        </tr>
                    </thead>
                    <tbody id="cartBody"></tbody>
                </table>
                <div id="emptyMsg" class="text-center text-muted small">Cart empty</div>

                <div class="mt-auto small">
                    <div class="sum-line">SubTotal<span id="sumSub">0</span></div>
                    <div class="input-group input-group-sm my-1">
                        <span class="input-group-text" >Discount</span>
                        <input id="discVal" class="form-control" value="0" name="OverallDiscount">
                        <select id="discType" class="form-select w-auto" name="DiscountIsPercent">
                            <option value="pct" selected>%</option>
                            <option value="rs">Rs</option>
                        </select>
                    </div>
                    <div class="sum-line">Discount<span id="sumDisc">0</span></div>
                    <div class="input-group input-group-sm my-1">
                        <span class="input-group-text">VAT %</span>
                        <input id="vatVal" class="form-control" value="@defaultVat" name="VATPercent">
                    </div>
                    <div class="sum-line">VAT<span id="sumVat">0</span></div>
                    <div class="sum-grand border-top pt-1 mt-1">Grand<span id="sumGrand">0</span></div>
                </div>

                <div class="d-grid gap-2 mt-2">
                    <button type="button" class="btn btn-primary" id="btnPay">Pay & Print</button>
                    <button type="button" class="btn btn-secondary" id="btnHold">Hold</button>
                    <button type="button" class="btn btn-success" id="btnUpdateHold" style="display:none">Update Held Order</button>
                    <button type="button" class="btn btn-outline-danger btn-sm" id="btnClear">Clear</button>
                </div>
            </div>
        </div>

        <!-- HELD-ORDERS OFFCANVAS -->
        <div class="offcanvas offcanvas-end" id="heldCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title">
                    <i class="bi-hourglass-split me-1"></i>
                    Held Orders
                    <span id="heldTotalBadge" class="badge bg-secondary ms-2">0 items</span>
                </h5>
                <button class="btn-close" data-bs-dismiss="offcanvas" type="button"></button>
            </div>
            <div class="offcanvas-body p-2">
                <div id="heldGrid" class="row g-2 text-center text-muted w-100">Loading…</div>
            </div>
        </div>
    </form>
 *@

    <form id="posForm" method="post" action="/POS/Index">
        <input type="hidden" name="itemsJson" id="itemsJson" />
        <input type="hidden" name="actionType" id="actionType" />
        <input type="hidden" name="saleId" id="saleId" />

        <nav class="navbar navbar-expand-lg bg-white shadow-sm sticky-top">
            <div class="container-fluid">
                <a class="navbar-brand fw-semibold" href="/">
                    <i class="bi-capsule-pill me-1"></i>POS
                </a>
                <div class="flex-grow-1 mx-2 position-relative">
                    <i class="bi-search position-absolute top-50 start-0 translate-middle-y text-muted ms-3"
                       style="z-index:2;"></i>
                    <input id="searchBox"
                           class="form-control ps-5"
                           type="text"
                           placeholder="Search medicine…"
                           style="padding-left:2.2rem;" />
                </div>
                <button class="btn position-relative me-3"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#cartCanvas"
                        type="button">
                    <i class="bi-cart fs-4"></i>
                    <span id="cartBadge" class="position-absolute top-0 badge bg-danger rounded-pill">0</span>
                </button>
                <button id="btnHeldOrders"
                        class="btn position-relative"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#heldCanvas"
                        title="Held Orders"
                        type="button">
                    <i class="bi-hourglass-split fs-4"></i>
                </button>
            </div>
        </nav>

        <!-- ░░ CATEGORY BAR ░░ -->
        <ul id="catBar" class="nav nav-pills nav-scroll px-3 mt-2 pb-1"></ul>

        <!-- ░░ PRODUCT GRID ░░ -->
        <div class="container-fluid mt-2 pb-4">
            <div id="gridWrap" class="prod-grid"></div>
        </div>

        <!-- ░░ CART OFFCANVAS ░░ -->
        <div class="offcanvas offcanvas-end" id="cartCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title"><i class="bi-cart me-1"></i>Cart</h5>
                <button class="btn-close" data-bs-dismiss="offcanvas"></button>
            </div>
            <div class="offcanvas-body d-flex flex-column p-2">
                <table class="table table-sm cart-table mb-1">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th class="text-center" style="width:80px">Qty</th>
                            <th class="text-end" style="width:80px">Rate</th>
                            <th class="text-end" style="width:80px">Total</th>
                            <th style="width:30px"></th>
                        </tr>
                    </thead>
                    <tbody id="cartBody"></tbody>
                </table>
                <div id="emptyMsg" class="text-center text-muted small">Cart empty</div>

                <div class="mt-auto small">
                    <div class="sum-line">
                        SubTotal
                        <span id="sumSub">0</span>
                    </div>

                    <!-- Overall discount -->
                    <div class="input-group input-group-sm my-1">
                        <span class="input-group-text">Discount</span>
                        <input name="OverallDiscount"
                               id="discVal"
                               class="form-control"
                               value="0" />
                        <select name="DiscountIsPercent"
                                id="discType"
                                class="form-select w-auto">
                            <option value="true" selected>%</option>
                            <option value="false">Rs</option>
                        </select>
                    </div>
                    <div class="sum-line">
                        Discount<span id="sumDisc">0</span>
                    </div>

                    <!-- VAT -->
                    <div class="input-group input-group-sm my-1">
                        <span class="input-group-text">VAT %</span>
                        <input name="VATPercent"
                               id="vatVal"
                               class="form-control"
                               value="@defaultVat" />
                    </div>
                    <div class="sum-line">
                        VAT<span id="sumVat">0</span>
                    </div>

                    <div class="sum-grand border-top pt-1 mt-1">
                        Grand<span id="sumGrand">0</span>
                    </div>
                </div>

                <div class="d-grid gap-2 mt-2">
                    <button type="button" class="btn btn-primary" id="btnPay">
                        Pay & Print
                    </button>
                    <button type="button" class="btn btn-secondary" id="btnHold">
                        Hold
                    </button>
                    <button type="button"
                            class="btn btn-success"
                            id="btnUpdateHold"
                            style="display:none">
                        Update Held Order
                    </button>
                    <button type="button"
                            class="btn btn-outline-danger btn-sm"
                            id="btnClear">
                        Clear
                    </button>
                </div>
            </div>
        </div>

        <!-- ░░ HELD ORDERS ░░ -->
        <div class="offcanvas offcanvas-end" id="heldCanvas">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title">
                    <i class="bi-hourglass-split me-1"></i>Held Orders
                    <span id="heldTotalBadge" class="badge bg-secondary ms-2">0 items</span>
                </h5>
                <button class="btn-close" data-bs-dismiss="offcanvas"></button>
            </div>
            <div class="offcanvas-body p-2">
                <div id="heldGrid"
                     class="row g-2 text-center text-muted w-100">
                    Loading…
                </div>
            </div>
        </div>
    </form>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ─── SERVER DATA ──────────────────────────────────────
        const PRODUCTS   = @Html.Raw(medsJson);
        const INVENTORY  = @Html.Raw(invJson);
        const CATEGORIES = @Html.Raw(catsJson);

        // ─── HELPERS ──────────────────────────────────────────
        const qs = s => document.querySelector(s);
        const money = n => n.toFixed(2);
        const stockMap = Object.fromEntries(INVENTORY.map(i=>[i.MedicineId,i.QuantityOnHand]));
        const initialStockMap = { ...stockMap };

        // ─── POS CLASS ───────────────────────────────────────
        class POS {
          cart = [];
          constructor(){
            this.fillCategories();
            this.renderProducts(PRODUCTS);
            this.bindUI();
          }

          bindUI(){
            // Search & categories
            qs('#searchBox').addEventListener('input', ()=>this.applyFilter());
            qs('#catBar').addEventListener('click', e => {
              if(e.target.dataset.cat!==undefined){
                qs('#catBar .active')?.classList.remove('active');
                e.target.classList.add('active');
                this.applyFilter();
              }
            });
            ['discVal','discType','vatVal'].forEach(id=>
              qs('#'+id).addEventListener('input', ()=>this.updateTotals())
            );

            // Clear cart
            qs('#btnClear').onclick = ()=>{
              if(!confirm('Clear cart?')) return;
              Object.assign(stockMap, initialStockMap);
              this.cart = [];
              this.applyFilter();
              this.syncUI();
            };

            // Hidden fields + form
            const form = qs('#posForm'),
                  itemsFld = qs('#itemsJson'),
                  actionFld = qs('#actionType'),
                  saleFld = qs('#saleId');
                  const serialize = () => JSON.stringify(
                    this.cart.map(l => {
                        console.log("l value : ", l)
                    const lineDiscount = l.discount || 0;
                    const lineSubTotal = (l.qty * l.price) - lineDiscount;
                    return {
                        MedicineId:  l.id,
                        MedicineName:l.name,
                        Quantity:    l.qty,
                        UnitPrice:   l.price,
                        Discount:    lineDiscount,
                        BatchNumber: "",
                        ExpiryDate:  null,
                        SubTotal:    lineSubTotal || 0    // if lineSubTotal is NaN/null/0-ish, we get 0
                    };
                    })
                );

            console.log(serialize)

            // New Hold
            qs('#btnHold').onclick = ()=>{
              saleFld.value = '';
              actionFld.value = 'Hold';
              itemsFld.value = serialize();
              form.action   = '/POS/Index';
              form.submit();
            };

            // New Pay (delete old hold first if any)
            qs('#btnPay').onclick = async ()=>{
              if(saleFld.value){
                await fetch(`/POS/DeleteHold/${saleFld.value}`,{method:'POST'});
              }
              saleFld.value   = '';
              actionFld.value = 'Pay';
              itemsFld.value  = serialize();
              form.action     = '/POS/Index';
              form.submit();
            };

            // Update Held
            qs('#btnUpdateHold').onclick = ()=>{
              actionFld.value = '';
              itemsFld.value  = serialize();
              form.action     = '/POS/UpdateHold';
              form.submit();
            };

            // Load held orders
            qs('#btnHeldOrders').onclick = ()=> this.loadHeldOrders();
          }

          // ─── HELD-ORDERS ───────────────────────────────────
          async loadHeldOrders(){
            const grid = qs('#heldGrid');
            grid.innerHTML = '<div class="text-muted w-100">Loading…</div>';
            try {
              const res = await fetch('/POS/GetHeldOrders');
              if(!res.ok) throw '';
              const list = await res.json();

              if(list.length===0){
                grid.innerHTML = '<div class="text-muted w-100">No held orders</div>';
                qs('#heldTotalBadge').textContent = '0 items';
                return;
              }

              // update total held count badge
              const totalHeld = list.reduce((sum,o)=>sum+o.totalQty,0);
              qs('#heldTotalBadge').textContent = `${totalHeld} items`;

              // render cards
              grid.innerHTML = list.map(o=>`
                <div class="col-6 col-md-4">
                  <div class="card shadow-sm">
                    <div class="card-body p-2">
                      <h6 class="card-title mb-1">Order #${o.saleId}</h6>
                      <p class="small mb-2">Items: ${o.totalQty}<br>Total: ${money(o.totalAmount)} PKR</p>
                      <div class="d-flex gap-1">
                        <button class="btn btn-outline-primary flex-fill recall-btn" data-id="${o.saleId}" title="Recall" type="button">
                          <i class="bi-arrow-counterclockwise"></i>
                        </button>
                        <button class="btn btn-outline-danger flex-fill delete-btn" data-id="${o.saleId}" title="Delete" type="button">
                          <i class="bi-trash"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>`).join('');

              // Recall handlers
              grid.querySelectorAll('.recall-btn').forEach(b=>{
                b.onclick = async ()=>{
                  const id = b.dataset.id;
                  const r = await fetch(`/POS/GetHeldOrder/${id}`);
                  if(!r.ok) return alert('Load failed');
                  const ord = await r.json();

                  // reset to fresh inventory
                  this.cart = [];
                  Object.assign(stockMap, initialStockMap);

                  // set discounts/VAT
                  qs('#discVal').value  = ord.overallDiscount;
                  qs('#discType').value = ord.discountIsPercent ? 'pct':'rs';
                  qs('#vatVal').value   = ord.vatPercent;

                  // rebuild cart & deduct
                  ord.items.forEach(i=>{
                    //stockMap[i.medicineId] -= i.quantity;
                    this.cart.push({
                      id:   i.medicineId,
                      name: i.medicineName,
                      price:i.unitPrice,
                      qty:  i.quantity
                    });
                  });

                  this.applyFilter(); this.syncUI();

                  // toggle buttons
                  qs('#saleId').value = id;
                  qs('#btnHold').style.display       = 'none';
                  qs('#btnUpdateHold').style.display = 'block';
                  bootstrap.Offcanvas.getOrCreateInstance(qs('#heldCanvas')).hide();
                };
              });

              // Delete handlers
              grid.querySelectorAll('.delete-btn').forEach(b=>{
                b.onclick = async ()=>{
                  if(!confirm('Delete held order?')) return;
                  const id = b.dataset.id;
                  const res = await fetch(`/POS/DeleteHold/${id}`,{method:'POST'});
                  //if(res.ok) await this.loadHeldOrders();
                  if(res.ok) window.location.reload();
                  else alert('Delete failed');
                };
              });
            }
            catch(e){
              grid.innerHTML = '<div class="text-danger w-100">Error loading held orders</div>';
            }
          }

          // ─── CATEGORIES & PRODUCTS ───────────────────────
          fillCategories(){
            const bar = qs('#catBar');
            bar.innerHTML = '<li class="nav-item"><a class="nav-link active cat-pill" data-cat="">All</a></li>';
            CATEGORIES.forEach(c=>
              bar.insertAdjacentHTML('beforeend',`
                <li class="nav-item">
                  <a class="nav-link cat-pill" data-cat="${c.CategoryId}">${c.CategoryName}</a>
                </li>`
              )
            );
          }

          renderProducts(list){
            const wrap = qs('#gridWrap');
            wrap.innerHTML = '';
            list.forEach(p=>{
              const s = stockMap[p.MedicineId]||0,
                    out = s===0,
                    clr = s ? (s<5?'warning':'success') : 'danger';
              wrap.insertAdjacentHTML('beforeend',`
                <div class="card prod-card position-relative ${out?'red':''}" data-id="${p.MedicineId}">
                  <span class="badge bg-${clr} stock-badge">${s}</span>
                  <div class="card-body d-flex flex-column p-2">
                    <img src="https://t4.ftcdn.net/jpg/02/76/80/31/360_F_276803150_yUZGcTLjJErZdmLw0GhDzARQY91S6yrv.jpg">
                    <div class="text-truncate small">${p.MedicineName}</div>
                    <div class="fw-bold mb-2">${money(p.UnitPrice)} PKR</div>
                    <button class="btn btn-sm btn-outline-primary w-100 add-btn" ${out?'disabled':''} type="button">Add</button>
                  </div>
                </div>`);
            });
            wrap.querySelectorAll('.add-btn').forEach(b=>
              b.onclick = ()=> this.addToCart(+b.closest('.prod-card').dataset.id)
            );
          }

          applyFilter(){
            const term = qs('#searchBox').value.trim().toLowerCase();
            const cat  = qs('#catBar .active').dataset.cat;
            this.renderProducts(
              PRODUCTS.filter(p =>
                (!cat || p.CategoryId==cat)
                && p.MedicineName.toLowerCase().includes(term)
              )
            );
          }

          // ─── CART OPERATIONS ────────────────────────────
          addToCart(id){
            if(stockMap[id]<=0) return;
            stockMap[id]--;
            let l = this.cart.find(x=>x.id===id);
            if(l) l.qty++;
            else this.cart.push({
              id, name:this.prod(id).MedicineName, price:this.prod(id).UnitPrice, qty:1
            });
            this.refreshCard(id);
            this.syncUI();
            this.animate(id);
          }

          changeQty(id,delta){
            let l=this.cart.find(x=>x.id===id);
            if(!l) return;
            if(delta>0 && stockMap[id]>0){
              l.qty++; stockMap[id]--;
            } else if(delta<0){
              if(l.qty===1) return this.remove(id);
              l.qty--; stockMap[id]++;
            }
            this.refreshCard(id);
            this.syncUI();
          }

          remove(id){
            let l=this.cart.find(x=>x.id===id);
            if(l) stockMap[id]+=l.qty;
            this.cart=this.cart.filter(x=>x.id!==id);
            this.refreshCard(id);
            this.syncUI();
          }

          refreshCard(id){
            let c=qs(`.prod-card[data-id="${id}"]`);
            if(!c) return;
            let s=stockMap[id],
                b=c.querySelector('.stock-badge');
            b.textContent = s;
            b.className    = `badge stock-badge bg-${s?(s<5?'warning':'success'):'danger'}`;
            c.classList.toggle('red', s===0);
            c.querySelector('.add-btn').disabled = s===0;
          }

          animate(id){
            let c=qs(`.prod-card[data-id="${id}"]`);
            c.style.animation='pop .25s ease';
            c.addEventListener('animationend', ()=>c.style.animation='', {once:true});
          }

          // ─── TOTALS & UI ───────────────────────────────
          syncUI(){
            qs('#cartBadge').textContent = this.cart.reduce((sum,l)=>sum+l.qty,0);
            let body=qs('#cartBody'); body.innerHTML='';
            if(!this.cart.length){
              qs('#emptyMsg').style.display='block';
              this.updateTotals();
              return;
            }
            qs('#emptyMsg').style.display='none';
            this.cart.forEach(l=> body.insertAdjacentHTML('beforeend',`
              <tr>
                <td class="text-truncate">${l.name}</td>
                <td class="text-center">
                  <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-secondary" onclick="pos.changeQty(${l.id},-1)">-</button>
                    <span class="px-2">${l.qty}</span>
                    <button class="btn btn-outline-secondary" onclick="pos.changeQty(${l.id},1)">+</button>
                  </div>
                </td>
                <td class="text-end">${money(l.price)}</td>
                <td class="text-end">${money(l.qty*l.price)}</td>
                <td>
                  <button class="btn btn-link text-danger p-0" onclick="pos.remove(${l.id})">
                    <i class="bi-x-lg"></i>
                  </button>
                </td>
              </tr>`));
            this.updateTotals();
          }

          updateTotals(){
            let sub = this.cart.reduce((sum,l)=>sum + l.qty*l.price,0),
                dv  = parseFloat(qs('#discVal').value)||0,
                dt  = qs('#discType').value,
                disc= dt==='pct' ? sub*dv/100 : dv,
                vr  = parseFloat(qs('#vatVal').value)||@defaultVat,
                vat = (sub - disc)*vr/100;
            qs('#sumSub').textContent   = money(sub);
            qs('#sumDisc').textContent  = money(disc);
            qs('#sumVat').textContent   = money(vat);
            qs('#sumGrand').textContent = money(sub - disc + vat);
          }

          prod(id){
            return PRODUCTS.find(p=>p.MedicineId===id);
          }
        }

        const pos = new POS();

    </script>
</body>
</html>

